<?php
/*
 * Mageho
 * Ilan PARMENTIER
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0) that is available
 * through the world-wide-web at this URL: http://www.opensource.org/licenses/OSL-3.0
 * If you are unable to obtain it through the world-wide-web, please send an email
 * to contact@mageho.com so we can send you a copy immediately.
 *
 * @category     Mageho
 * @package     Mageho_Atos
 * @author       Mageho, Ilan PARMENTIER <contact@mageho.com>
 * @copyright   Copyright (c) 2014  Mageho (http://www.mageho.com)
 * @license      http://www.opensource.org/licenses/OSL-3.0  Open Software License (OSL 3.0)
 */
?>
<table class="atos-selection" id="atos_checkout" cellspacing="0">
    <col width="100%" />
    <thead>
        <tr>
            <th><?php echo $this->escapeHtml($this->getFieldsetLabel()) ?></th>
        </tr>
    </thead>
    <tbody>
	<?php foreach($this->getElements() as $htmlId => $element): ?>
        <tr>
        <?php if ($this->getIsElementSimplified($element)):?>
            <td class="atos-selection-simplified">
                <?php if ($this->hasInheritElement($element)): ?>
                    <div><?php echo $this->getInheritElementHtml($element) ?><?php echo $this->getInheritElementLabelHtml($element) ?></div>
                <?php endif; ?>
                <label for="<?php echo $htmlId; ?>"><?php echo $this->getElementHtml($element) ?><strong><?php echo $this->getElementLabelTextHtml($element); ?></strong><br />
                <?php echo $this->escapeHtml($this->getElementComment($element))?></label>
            </td>
        <?php else:?>
            <td>
                <?php if ($this->hasInheritElement($element)): ?>
                    <div><?php echo $this->getInheritElementHtml($element) ?><?php echo $this->getInheritElementLabelHtml($element) ?></div>
                <?php endif; ?>
                <label for="<?php echo $htmlId; ?>"><?php echo $this->getElementHtml($element) ?><strong><?php echo $this->getElementLabelTextHtml($element); ?></strong><br />
                <?php echo $this->getElementComment($element)?></label>
            </td>
        <?php endif;?>
        </tr>
	<?php endforeach; ?>
    </tbody>
</table>

<script type="text/javascript">

Event.observe(window, 'load', function() {
    var pConfig = new AtosConfig;
	
    ['atoswps', 'atoswpseveral', 'atoswpsprint', 'atoswp3xcb'].each(function(m) {
        Element.observe(pConfig.getMethodSwitcher(m).id, 'click', pConfig.trackMethod.bind(pConfig, m));
    });
	
    pConfig.fastMode = true;

    ['atoswps', 'atoswpseveral', 'atoswpsprint', 'atoswp3xcb'].each(function(m) {
        pConfig.trackMethod(m);
    });
	
    pConfig.fastMode = false;
    pConfig.destruct();
});

AtosConfig = Class.create();
AtosConfig.prototype = {
    initialize: function(){
        this.methods = $H({
                atoswps: $H({
                    switcher: 'atoswps',
                    fieldset: 'atoswps',
                    backendConfig : $H(<?php echo $this->getElementBackendConfig($this->getElement('atos_global_atoswps')); ?>)
                }),
                atoswpseveral: $H({
                    switcher: 'atoswpseveral',
                    fieldset: 'atoswpseveral',
                    backendConfig : $H(<?php echo $this->getElementBackendConfig($this->getElement('atos_global_atoswpseveral')); ?>)
                }),
                atoswpsprint: $H({
                    switcher: 'atoswpsprint',
                    fieldset: 'atoswpsprint',
                    backendConfig : $H(<?php echo $this->getElementBackendConfig($this->getElement('atos_global_atoswpsprint')); ?>)
                }),
                atoswp3xcb: $H({
                    switcher: 'atoswp3xcb',
                    fieldset: 'atoswp3xcb',
                    backendConfig : $H(<?php echo $this->getElementBackendConfig($this->getElement('atos_global_atoswp3xcb')); ?>)
                })
        });
        this.disabledMethods = [];
    },

    getMethods: function()
    {
        return this.methods;
    },

    getMethod: function(method)
    {
        return this.methods.get(method);
    },

    isDisabled: function(method)
    {
        return this.disabledMethods.indexOf(method) != -1;
    },

    isHidden: function(method)
    {
        if (this.getMethod(method).get('hidden')) {
            return true;
        }
        return false;
    },

    getMethodFieldset: function(method)
    {
        var fieldsetId = 'atos_' + this.getMethod(method).get('fieldset');
        return $(fieldsetId);
    },

    getMethodFieldsetHeadingLink: function(fieldset)
    {
        var heading = fieldset.previous('div');
        return heading.down('a');
    },

    getMethodSwitcher: function(method)
    {
        var switcherId = 'atos_global_' + this.getMethod(method).get('switcher');
        return $(switcherId);
    },

    getMethodSwitcherValue: function(method)
    {
        var switcherValueId = 'atos_global_' + this.getMethod(method).get('switcher') + '_value';
        return $(switcherValueId);
    },

    getMethodSwitcherLabelText: function(method)
    {
        var switcherValueId = 'atos_global_' + this.getMethod(method).get('switcher') + '_label_text';
        return $(switcherValueId);
    },

    getMethodSwitcherInherit: function(method)
    {
        var inheritId = 'atos_global_' + this.getMethod(method).get('switcher') + '_inherit';
        return $(inheritId);
    },

    markMethodAsReadonly: function(method, readonly)
    {
        if (readonly == undefined) {
            readonly = true;
        }
        if (this.isDisabled(method) && !readonly || this.isHidden(method)) {
            return;
        }
        if (this.fastMode) {
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        var inherit = this.getMethodSwitcherInherit(method);
        if (inherit != undefined) {
            inherit.disabled = readonly;
            if (!inherit.disabled && inherit.checked) {
                readonly = true;
            }
        }
        this.getMethodSwitcherValue(method).value = this.getMethodSwitcher(method).checked ? '1' : '0';
        this.getMethodSwitcher(method).disabled = readonly;
    },

    enableMethod: function(method, readonly)
    {
        if (this.isDisabled(method) || this.isHidden(method)) {
            return;
        }
        readonly = (readonly == undefined ? false : readonly);
        if (this.fastMode) {
            this.getMethod(method).set('disabled', false);
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        this.getMethodSwitcher(method).checked = true;
        this.markMethodAsReadonly(method, readonly);
        this.toggleFieldset(this.getMethodFieldset(method), this.getMethodSwitcher(method));
    },

    disableMethod: function(method, readonly)
    {
        if (this.isHidden(method)) {
            return;
        }
        readonly = (readonly == undefined ? true : readonly);
        if (this.fastMode) {
            this.getMethod(method).set('disabled', true);
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        this.getMethodSwitcher(method).checked = false;
        this.markMethodAsReadonly(method, readonly);
        this.toggleFieldset(this.getMethodFieldset(method), this.getMethodSwitcher(method));
    },

    toggleMethodVisibility: function(method, isHidden)
    {
        var selection = this.getMethodSwitcher(method).up('tr');
        var fieldset = this.getMethodFieldset(method);
        var fieldsetHead = fieldset.previous('div');
        [selection, fieldset, fieldsetHead].each(function(e) {
            isHidden ? e.hide() : e.show();
        });
        // do not show fieldset for turned off methods
        if (!isHidden && !this.getMethodSwitcher(method).checked) {
            fieldset.hide();
        }
        this.getMethod(method).set('hidden', isHidden);
    },

    hideMethod: function(method)
    {
        this.toggleMethodVisibility(method, true);
    },

    showMethod: function(method)
    {
        this.toggleMethodVisibility(method, false);
    },

    trackMethod: function(method)
    {
        var switcher = this.getMethodSwitcher(method);
        if (!switcher.checked && this.fastMode || !this.fastMode) {
            this.toggleFieldset(this.getMethodFieldset(method), switcher);
        }
        this.getMethodSwitcherValue(method).value = switcher.checked ? '1' : '0';
    },

    enableRow: function(rowId)
    {
        $(rowId).select('input','select').each(function(e) {
            e.disabled = false;
        });
        $(rowId).show();
    },

    disableRow: function(rowId)
    {
        $(rowId).select('input','select').each(function(e) {
            e.disabled = true;
        });
        $(rowId).hide();
    },

    toggleFieldset: function(fieldset, checkbox)
    {
        var isHidden = !checkbox.checked;
        this.toggleValueElements(checkbox, fieldset, isHidden);
        isHidden ? fieldset.hide() : fieldset.show();
        var heading = fieldset.previous('div');
        var headingLink = this.getMethodFieldsetHeadingLink(fieldset);
        isHidden ? heading.addClassName('disabled') : heading.removeClassName('disabled');
        if (isHidden) {
            headingLink.oldHref = headingLink.href;
            headingLink.oldOnclick = headingLink.onclick;
            headingLink.onclick = "return false;";
            headingLink.href = "javascript:void(0)";
        } else {
            if (headingLink.oldOnclick && headingLink.oldHref) {
                headingLink.onclick = headingLink.oldOnclick;
                headingLink.href = headingLink.oldHref;
            }
        }
    },

    toggleValueElements: function(checkbox, container, checked)
    {
        var isDisabled = (checked != undefined ? checked : $(checkbox).checked);
        var elemInherit, currIsDisabled;
        $(container).select('select', 'input', 'textarea', 'button').each (function(elem) {
            // avoid inherit checkbox functionality rewrite
            currIsDisabled = isDisabled;
            if (!currIsDisabled) {
                elemInherit = $(elem.id + '_inherit');
                if (elemInherit != undefined && elemInherit.checked) {
                    currIsDisabled = true;
                }
            }
            elem.disabled=currIsDisabled;
            if (currIsDisabled) {
                elem.addClassName('disabled');
            } else {
                elem.removeClassName('disabled');
            }
        });
    },

    destruct: function()
    {
        this.getMethods().each(function(method) {
            if (method.value.get('disabled') != undefined) {
                method.value.get('disabled') ? this.disableMethod(method.key) : this.enableMethod(method.key);
            }
            if (method.value.get('readonly') != undefined) {
                this.markMethodAsReadonly(method.key, method.value.get('readonly'));
            }
        }.bind(this));
    }
}
</script>
